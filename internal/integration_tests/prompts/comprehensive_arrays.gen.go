// Code generated by dotprompt-gen-go dev. DO NOT EDIT.

package prompts

import "fmt"
import "github.com/oter/dotprompt-gen-go/pkg/validator"

// ComprehensiveArraysInput represents the input for comprehensive arrays
type ComprehensiveArraysInput struct {
	// Array of booleans
	BooleanList []bool `json:"boolean_list"`
	// Array of category enums
	CategoryList []CategoryListItemEnum `json:"category_list"`
	// Array of integers
	IntegerList []int `json:"integer_list"`
	// Array of numbers
	NumberList []float64 `json:"number_list"`
	// Optional string array
	OptionalTags []string `json:"optional_tags"`
	// Array of priority enums
	PriorityList []PriorityListItemEnum `json:"priority_list"`
	// Array of strings
	StringList []string `json:"string_list"`
	// Array of user objects
	UserList []UserListItem `json:"user_list"`
}

// UserListItem represents item in user_list array
type UserListItem struct {
	Active bool   `json:"active"`
	Age    int    `json:"age"`
	Name   string `json:"name"`
}

// ComprehensiveArraysOutput represents the output for comprehensive arrays
type ComprehensiveArraysOutput struct {
	// Calculated numeric results
	CalculatedNumbers []float64 `json:"calculated_numbers"`
	// Enum array in object
	EnumArrayInObject EnumArrayInObject `json:"enum_array_in_object"`
	// Processed string results
	ProcessedStrings []string `json:"processed_strings"`
	// Processed user objects
	ProcessedUsers []ProcessedUsersItem `json:"processed_users"`
	// Selected category enums
	SelectedCategories []SelectedCategoriesItemEnum `json:"selected_categories"`
	// Status boolean flags
	StatusFlags []bool `json:"status_flags"`
	// Summary integer counts
	SummaryCounts []int `json:"summary_counts"`
}

// EnumArrayInObject represents Enum array in object
type EnumArrayInObject struct {
	// Enum array in object
	EnumArray []EnumArrayItemEnum `json:"enum_array"`
	// String field
	StringField *string `json:"string_field"`
}

// ProcessedUsersItem represents item in processed_users array
type ProcessedUsersItem struct {
	Id         *string         `json:"id"`
	UserStatus *UserStatusEnum `json:"user_status"`
}

// Validate validates all fields in ComprehensiveArraysInput
func (s ComprehensiveArraysInput) Validate() error {
	return nil
}

// Validate validates all fields in UserListItem
func (s UserListItem) Validate() error {
	return nil
}

// Validate validates all fields in ComprehensiveArraysOutput
func (s ComprehensiveArraysOutput) Validate() error {
	fieldValidations := map[string]validator.Validator{
		"enum_array_in_object": s.EnumArrayInObject,
	}
	return validator.ValidateFields(fieldValidations)
}

// Validate validates all fields in EnumArrayInObject
func (s EnumArrayInObject) Validate() error {
	return nil
}

// Validate validates all fields in ProcessedUsersItem
func (s ProcessedUsersItem) Validate() error {
	fieldValidations := map[string]validator.Validator{
		"user_status": s.UserStatus,
	}
	return validator.ValidateFields(fieldValidations)
}

// CategoryListItemEnum represents valid category_list item values
type CategoryListItemEnum string

const (
	CategoryListItemEnumTech      CategoryListItemEnum = "tech"
	CategoryListItemEnumFinance   CategoryListItemEnum = "finance"
	CategoryListItemEnumHealth    CategoryListItemEnum = "health"
	CategoryListItemEnumEducation CategoryListItemEnum = "education"
)

// Validate checks if the CategoryListItemEnum value is valid
func (e CategoryListItemEnum) Validate() error {
	switch e {
	case CategoryListItemEnumTech, CategoryListItemEnumFinance, CategoryListItemEnumHealth, CategoryListItemEnumEducation:
		return nil
	default:
		return fmt.Errorf("invalid CategoryListItemEnum value: %q, must be one of: tech, finance, health, education", string(e))
	}
}

// PriorityListItemEnum represents valid priority_list item values
type PriorityListItemEnum string

const (
	PriorityListItemEnumLow    PriorityListItemEnum = "low"
	PriorityListItemEnumMedium PriorityListItemEnum = "medium"
	PriorityListItemEnumHigh   PriorityListItemEnum = "high"
	PriorityListItemEnumUrgent PriorityListItemEnum = "urgent"
)

// Validate checks if the PriorityListItemEnum value is valid
func (e PriorityListItemEnum) Validate() error {
	switch e {
	case PriorityListItemEnumLow, PriorityListItemEnumMedium, PriorityListItemEnumHigh, PriorityListItemEnumUrgent:
		return nil
	default:
		return fmt.Errorf("invalid PriorityListItemEnum value: %q, must be one of: low, medium, high, urgent", string(e))
	}
}

// EnumArrayItemEnum represents valid enum_array item values
type EnumArrayItemEnum string

const (
	EnumArrayItemEnumActive    EnumArrayItemEnum = "active"
	EnumArrayItemEnumInactive  EnumArrayItemEnum = "inactive"
	EnumArrayItemEnumSuspended EnumArrayItemEnum = "suspended"
)

// Validate checks if the EnumArrayItemEnum value is valid
func (e EnumArrayItemEnum) Validate() error {
	switch e {
	case EnumArrayItemEnumActive, EnumArrayItemEnumInactive, EnumArrayItemEnumSuspended:
		return nil
	default:
		return fmt.Errorf("invalid EnumArrayItemEnum value: %q, must be one of: active, inactive, suspended", string(e))
	}
}

// UserStatusEnum represents valid user_status values
type UserStatusEnum string

const (
	UserStatusEnumActive    UserStatusEnum = "active"
	UserStatusEnumInactive  UserStatusEnum = "inactive"
	UserStatusEnumSuspended UserStatusEnum = "suspended"
)

// Validate checks if the UserStatusEnum value is valid
func (e UserStatusEnum) Validate() error {
	switch e {
	case UserStatusEnumActive, UserStatusEnumInactive, UserStatusEnumSuspended:
		return nil
	default:
		return fmt.Errorf("invalid UserStatusEnum value: %q, must be one of: active, inactive, suspended", string(e))
	}
}

// SelectedCategoriesItemEnum represents valid selected_categories item values
type SelectedCategoriesItemEnum string

const (
	SelectedCategoriesItemEnumTech      SelectedCategoriesItemEnum = "tech"
	SelectedCategoriesItemEnumFinance   SelectedCategoriesItemEnum = "finance"
	SelectedCategoriesItemEnumHealth    SelectedCategoriesItemEnum = "health"
	SelectedCategoriesItemEnumEducation SelectedCategoriesItemEnum = "education"
)

// Validate checks if the SelectedCategoriesItemEnum value is valid
func (e SelectedCategoriesItemEnum) Validate() error {
	switch e {
	case SelectedCategoriesItemEnumTech, SelectedCategoriesItemEnumFinance, SelectedCategoriesItemEnumHealth, SelectedCategoriesItemEnumEducation:
		return nil
	default:
		return fmt.Errorf("invalid SelectedCategoriesItemEnum value: %q, must be one of: tech, finance, health, education", string(e))
	}
}
