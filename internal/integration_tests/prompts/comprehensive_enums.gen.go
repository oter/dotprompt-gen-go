// Code generated by dotprompt-gen-go dev. DO NOT EDIT.

package prompts

import "fmt"

// ComprehensiveEnumsInput represents the input for comprehensive enums
type ComprehensiveEnumsInput struct {
	// Task priority level
	Priority PriorityEnum `json:"priority"`
	// Approval status
	Status StatusEnum `json:"status"`
	// Complexity level with hyphens
	Difficulty DifficultyEnum `json:"difficulty"`
	// Target language code
	Language LanguageEnum `json:"language"`
	// Output format preference
	Format FormatEnum `json:"format"`
	// Confidence level as integer
	ConfidenceLevel ConfidenceLevelEnum `json:"confidence_level"`
}

// ComprehensiveEnumsOutput represents the output for comprehensive enums
type ComprehensiveEnumsOutput struct {
	// Processing result
	Result ResultEnum `json:"result"`
	// Detailed processing status
	ProcessingStatus ProcessingStatusEnum `json:"processing_status"`
	// Error code if processing fails
	ErrorCode *ErrorCodeEnum `json:"error_code"`
	// Output quality score
	QualityScore QualityScoreEnum `json:"quality_score"`
	// Result urgency level
	Urgency *UrgencyEnum `json:"urgency"`
}

// PriorityEnum represents valid priority values
type PriorityEnum string

const (
	PriorityEnumLow    PriorityEnum = "low"
	PriorityEnumMedium PriorityEnum = "medium"
	PriorityEnumHigh   PriorityEnum = "high"
)

// Validate checks if the PriorityEnum value is valid
func (e PriorityEnum) Validate() error {
	switch e {
	case PriorityEnumLow, PriorityEnumMedium, PriorityEnumHigh:
		return nil
	default:
		return fmt.Errorf("invalid PriorityEnum value: %q, must be one of: low, medium, high", string(e))
	}
}

// StatusEnum represents valid status values
type StatusEnum string

const (
	StatusEnumPending  StatusEnum = "pending"
	StatusEnumApproved StatusEnum = "approved"
	StatusEnumRejected StatusEnum = "rejected"
)

// Validate checks if the StatusEnum value is valid
func (e StatusEnum) Validate() error {
	switch e {
	case StatusEnumPending, StatusEnumApproved, StatusEnumRejected:
		return nil
	default:
		return fmt.Errorf("invalid StatusEnum value: %q, must be one of: pending, approved, rejected", string(e))
	}
}

// DifficultyEnum represents valid difficulty values
type DifficultyEnum string

const (
	DifficultyEnumVeryEasy DifficultyEnum = "very-easy"
	DifficultyEnumEasy     DifficultyEnum = "easy"
	DifficultyEnumMedium   DifficultyEnum = "medium"
	DifficultyEnumHard     DifficultyEnum = "hard"
	DifficultyEnumVeryHard DifficultyEnum = "very-hard"
)

// Validate checks if the DifficultyEnum value is valid
func (e DifficultyEnum) Validate() error {
	switch e {
	case DifficultyEnumVeryEasy, DifficultyEnumEasy, DifficultyEnumMedium, DifficultyEnumHard, DifficultyEnumVeryHard:
		return nil
	default:
		return fmt.Errorf("invalid DifficultyEnum value: %q, must be one of: very-easy, easy, medium, hard, very-hard", string(e))
	}
}

// LanguageEnum represents valid language values
type LanguageEnum string

const (
	LanguageEnumEn   LanguageEnum = "en"
	LanguageEnumEs   LanguageEnum = "es"
	LanguageEnumFr   LanguageEnum = "fr"
	LanguageEnumDe   LanguageEnum = "de"
	LanguageEnumJa   LanguageEnum = "ja"
	LanguageEnumZhCn LanguageEnum = "zh-cn"
)

// Validate checks if the LanguageEnum value is valid
func (e LanguageEnum) Validate() error {
	switch e {
	case LanguageEnumEn, LanguageEnumEs, LanguageEnumFr, LanguageEnumDe, LanguageEnumJa, LanguageEnumZhCn:
		return nil
	default:
		return fmt.Errorf("invalid LanguageEnum value: %q, must be one of: en, es, fr, de, ja, zh-cn", string(e))
	}
}

// FormatEnum represents valid format values
type FormatEnum string

const (
	FormatEnumJson FormatEnum = "json"
	FormatEnumXml  FormatEnum = "xml"
	FormatEnumYaml FormatEnum = "yaml"
	FormatEnumCsv  FormatEnum = "csv"
)

// Validate checks if the FormatEnum value is valid
func (e FormatEnum) Validate() error {
	switch e {
	case FormatEnumJson, FormatEnumXml, FormatEnumYaml, FormatEnumCsv:
		return nil
	default:
		return fmt.Errorf("invalid FormatEnum value: %q, must be one of: json, xml, yaml, csv", string(e))
	}
}

// ConfidenceLevelEnum represents valid confidence_level values
type ConfidenceLevelEnum string

const (
	ConfidenceLevelEnum1 ConfidenceLevelEnum = "1"
	ConfidenceLevelEnum2 ConfidenceLevelEnum = "2"
	ConfidenceLevelEnum3 ConfidenceLevelEnum = "3"
	ConfidenceLevelEnum4 ConfidenceLevelEnum = "4"
	ConfidenceLevelEnum5 ConfidenceLevelEnum = "5"
)

// Validate checks if the ConfidenceLevelEnum value is valid
func (e ConfidenceLevelEnum) Validate() error {
	switch e {
	case ConfidenceLevelEnum1, ConfidenceLevelEnum2, ConfidenceLevelEnum3, ConfidenceLevelEnum4, ConfidenceLevelEnum5:
		return nil
	default:
		return fmt.Errorf("invalid ConfidenceLevelEnum value: %q, must be one of: 1, 2, 3, 4, 5", string(e))
	}
}

// ResultEnum represents valid result values
type ResultEnum string

const (
	ResultEnumSuccess ResultEnum = "success"
	ResultEnumFailure ResultEnum = "failure"
	ResultEnumRetry   ResultEnum = "retry"
)

// Validate checks if the ResultEnum value is valid
func (e ResultEnum) Validate() error {
	switch e {
	case ResultEnumSuccess, ResultEnumFailure, ResultEnumRetry:
		return nil
	default:
		return fmt.Errorf("invalid ResultEnum value: %q, must be one of: success, failure, retry", string(e))
	}
}

// ProcessingStatusEnum represents valid processing_status values
type ProcessingStatusEnum string

const (
	ProcessingStatusEnumQueued     ProcessingStatusEnum = "queued"
	ProcessingStatusEnumProcessing ProcessingStatusEnum = "processing"
	ProcessingStatusEnumCompleted  ProcessingStatusEnum = "completed"
	ProcessingStatusEnumFailed     ProcessingStatusEnum = "failed"
	ProcessingStatusEnumCancelled  ProcessingStatusEnum = "cancelled"
)

// Validate checks if the ProcessingStatusEnum value is valid
func (e ProcessingStatusEnum) Validate() error {
	switch e {
	case ProcessingStatusEnumQueued, ProcessingStatusEnumProcessing, ProcessingStatusEnumCompleted, ProcessingStatusEnumFailed, ProcessingStatusEnumCancelled:
		return nil
	default:
		return fmt.Errorf("invalid ProcessingStatusEnum value: %q, must be one of: queued, processing, completed, failed, cancelled", string(e))
	}
}

// ErrorCodeEnum represents valid error_code values
type ErrorCodeEnum string

const (
	ErrorCodeEnumTimeout      ErrorCodeEnum = "timeout"
	ErrorCodeEnumInvalidInput ErrorCodeEnum = "invalid_input"
	ErrorCodeEnumServerError  ErrorCodeEnum = "server_error"
	ErrorCodeEnumRateLimit    ErrorCodeEnum = "rate_limit"
)

// Validate checks if the ErrorCodeEnum value is valid
func (e ErrorCodeEnum) Validate() error {
	switch e {
	case ErrorCodeEnumTimeout, ErrorCodeEnumInvalidInput, ErrorCodeEnumServerError, ErrorCodeEnumRateLimit:
		return nil
	default:
		return fmt.Errorf("invalid ErrorCodeEnum value: %q, must be one of: timeout, invalid_input, server_error, rate_limit", string(e))
	}
}

// QualityScoreEnum represents valid quality_score values
type QualityScoreEnum string

const (
	QualityScoreEnum1 QualityScoreEnum = "1"
	QualityScoreEnum2 QualityScoreEnum = "2"
	QualityScoreEnum3 QualityScoreEnum = "3"
	QualityScoreEnum4 QualityScoreEnum = "4"
	QualityScoreEnum5 QualityScoreEnum = "5"
)

// Validate checks if the QualityScoreEnum value is valid
func (e QualityScoreEnum) Validate() error {
	switch e {
	case QualityScoreEnum1, QualityScoreEnum2, QualityScoreEnum3, QualityScoreEnum4, QualityScoreEnum5:
		return nil
	default:
		return fmt.Errorf("invalid QualityScoreEnum value: %q, must be one of: 1, 2, 3, 4, 5", string(e))
	}
}

// UrgencyEnum represents valid urgency values
type UrgencyEnum string

const (
	UrgencyEnumLow      UrgencyEnum = "low"
	UrgencyEnumNormal   UrgencyEnum = "normal"
	UrgencyEnumHigh     UrgencyEnum = "high"
	UrgencyEnumCritical UrgencyEnum = "critical"
)

// Validate checks if the UrgencyEnum value is valid
func (e UrgencyEnum) Validate() error {
	switch e {
	case UrgencyEnumLow, UrgencyEnumNormal, UrgencyEnumHigh, UrgencyEnumCritical:
		return nil
	default:
		return fmt.Errorf("invalid UrgencyEnum value: %q, must be one of: low, normal, high, critical", string(e))
	}
}
